{"id":"../../node_modules/spinal-model-graph/build/Relations/SpinalRelationFactory.js","dependencies":[{"name":"/home/spinalcom/Documents/spinal/maintainer/spinal-browser-maintainer/package.json","includedInParent":true,"mtime":1556188313517},{"name":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-model-graph/package.json","includedInParent":true,"mtime":1555411428292},{"name":"./SpinalRelationRef","loc":{"line":8,"column":56},"parent":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-model-graph/build/Relations/SpinalRelationFactory.js","resolved":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-model-graph/build/Relations/SpinalRelationRef.js"},{"name":"./SpinalRelationLstPtr","loc":{"line":10,"column":59},"parent":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-model-graph/build/Relations/SpinalRelationFactory.js","resolved":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-model-graph/build/Relations/SpinalRelationLstPtr.js"},{"name":"./SpinalRelationPtrLst","loc":{"line":12,"column":59},"parent":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-model-graph/build/Relations/SpinalRelationFactory.js","resolved":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-model-graph/build/Relations/SpinalRelationPtrLst.js"},{"name":"spinal-core-connectorjs","loc":{"line":14,"column":60},"parent":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-model-graph/build/Relations/SpinalRelationFactory.js","resolved":"/home/spinalcom/Documents/spinal/maintainer/node_modules/spinal-core-connectorjs/lib/spinalcore.node.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpinalRelationFactory = exports.RELATION_TYPE_LIST = exports.SPINAL_RELATION_PTR_LST_TYPE = exports.SPINAL_RELATION_LST_PTR_TYPE = exports.SPINAL_RELATION_TYPE = void 0;\n\nvar _SpinalRelationRef = _interopRequireDefault(require(\"./SpinalRelationRef\"));\n\nvar _SpinalRelationLstPtr = _interopRequireDefault(require(\"./SpinalRelationLstPtr\"));\n\nvar _SpinalRelationPtrLst = _interopRequireDefault(require(\"./SpinalRelationPtrLst\"));\n\nvar _spinalCoreConnectorjs = _interopRequireDefault(require(\"spinal-core-connectorjs\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nconst SPINAL_RELATION_TYPE = \"Ref\";\nexports.SPINAL_RELATION_TYPE = SPINAL_RELATION_TYPE;\nconst SPINAL_RELATION_LST_PTR_TYPE = \"LstPtr\";\nexports.SPINAL_RELATION_LST_PTR_TYPE = SPINAL_RELATION_LST_PTR_TYPE;\nconst SPINAL_RELATION_PTR_LST_TYPE = \"PtrLst\";\nexports.SPINAL_RELATION_PTR_LST_TYPE = SPINAL_RELATION_PTR_LST_TYPE;\nconst RELATION_TYPE_LIST = [SPINAL_RELATION_TYPE, SPINAL_RELATION_LST_PTR_TYPE, SPINAL_RELATION_PTR_LST_TYPE];\nexports.RELATION_TYPE_LIST = RELATION_TYPE_LIST;\n\nclass SpinalRelationFactory {\n  /**\n   * Create a new relation of relationType with the relationName.\n   * @param {String} relationName Name of the relation\n   * @param {String} relationType Type of the relation\n   * @return {SpinalRelationRef | SpinalRelationLstPtr | SpinalRelationPtrLst} A new SpinalRelation\n   * @static\n   */\n  static getNewRelation(relationName, relationType) {\n    let relation;\n\n    switch (relationType) {\n      case SPINAL_RELATION_TYPE:\n        relation = new _SpinalRelationRef.default(relationName);\n        break;\n\n      case SPINAL_RELATION_LST_PTR_TYPE:\n        relation = new _SpinalRelationLstPtr.default(relationName);\n        break;\n\n      case SPINAL_RELATION_PTR_LST_TYPE:\n        relation = new _SpinalRelationPtrLst.default(relationName);\n        break;\n\n      default:\n        throw new Error(\"Unknown relationType\");\n    }\n\n    return relation;\n  }\n\n}\n\nexports.SpinalRelationFactory = SpinalRelationFactory;\n\n_spinalCoreConnectorjs.default.register_models([SpinalRelationFactory]);\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/Relations/SpinalRelationFactory.js"],"names":["SPINAL_RELATION_TYPE","SPINAL_RELATION_LST_PTR_TYPE","SPINAL_RELATION_PTR_LST_TYPE","RELATION_TYPE_LIST","SpinalRelationFactory","getNewRelation","relationName","relationType","relation","SpinalRelationRef","SpinalRelationLstPtr","SpinalRelationPtrLst","Error","spinalCore","register_models"],"mappings":";;;;;;;AAuBA;;AACA;;AACA;;AACA;;;;AA1BA;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAMA,oBAAoB,GAAG,KAA7B;;AACA,MAAMC,4BAA4B,GAAG,QAArC;;AACA,MAAMC,4BAA4B,GAAG,QAArC;;AACA,MAAMC,kBAAkB,GAAG,CACzBH,oBADyB,EAEzBC,4BAFyB,EAGzBC,4BAHyB,CAA3B;;;AAMA,MAAME,qBAAN,CAA4B;AAC1B;;;;;;;AAOA,SAAOC,cAAP,CAAsBC,YAAtB,EAAoCC,YAApC,EAAkD;AAChD,QAAIC,QAAJ;;AAEA,YAAQD,YAAR;AACE,WAAKP,oBAAL;AACEQ,QAAAA,QAAQ,GAAG,IAAIC,0BAAJ,CAAsBH,YAAtB,CAAX;AACA;;AACF,WAAKL,4BAAL;AACEO,QAAAA,QAAQ,GAAG,IAAIE,6BAAJ,CAAyBJ,YAAzB,CAAX;AACA;;AACF,WAAKJ,4BAAL;AACEM,QAAAA,QAAQ,GAAG,IAAIG,6BAAJ,CAAyBL,YAAzB,CAAX;AACA;;AACF;AACE,cAAM,IAAIM,KAAJ,CAAU,sBAAV,CAAN;AAXJ;;AAcA,WAAOJ,QAAP;AACD;;AA1ByB;;;;AA6B5BK,+BAAWC,eAAX,CAA2B,CAACV,qBAAD,CAA3B","sourcesContent":["/*\n * Copyright 2018 SpinalCom - www.spinalcom.com\n *\n * This file is part of SpinalCore.\n *\n * Please read all of the following terms and conditions\n * of the Free Software license Agreement (\"Agreement\")\n * carefully.\n *\n * This Agreement is a legally binding contract between\n * the Licensee (as defined below) and SpinalCom that\n * sets forth the terms and conditions that govern your\n * use of the Program. By installing and/or using the\n * Program, you agree to abide by all the terms and\n * conditions stated or referenced herein.\n *\n * If you do not agree to abide by these terms and\n * conditions, do not demonstrate your acceptance and do\n * not install or use the Program.\n * You should have received a copy of the license along\n * with this file. If not, see\n * <http://resources.spinalcom.com/licenses.pdf>.\n */\nimport SpinalRelationRef from \"./SpinalRelationRef\";\nimport SpinalRelationLstPtr from \"./SpinalRelationLstPtr\";\nimport SpinalRelationPtrLst from \"./SpinalRelationPtrLst\";\nimport spinalCore from \"spinal-core-connectorjs\";\n\nconst SPINAL_RELATION_TYPE = \"Ref\";\nconst SPINAL_RELATION_LST_PTR_TYPE = \"LstPtr\";\nconst SPINAL_RELATION_PTR_LST_TYPE = \"PtrLst\";\nconst RELATION_TYPE_LIST = [\n  SPINAL_RELATION_TYPE,\n  SPINAL_RELATION_LST_PTR_TYPE,\n  SPINAL_RELATION_PTR_LST_TYPE\n];\n\nclass SpinalRelationFactory {\n  /**\n   * Create a new relation of relationType with the relationName.\n   * @param {String} relationName Name of the relation\n   * @param {String} relationType Type of the relation\n   * @return {SpinalRelationRef | SpinalRelationLstPtr | SpinalRelationPtrLst} A new SpinalRelation\n   * @static\n   */\n  static getNewRelation(relationName, relationType) {\n    let relation;\n\n    switch (relationType) {\n      case SPINAL_RELATION_TYPE:\n        relation = new SpinalRelationRef(relationName);\n        break;\n      case SPINAL_RELATION_LST_PTR_TYPE:\n        relation = new SpinalRelationLstPtr(relationName);\n        break;\n      case SPINAL_RELATION_PTR_LST_TYPE:\n        relation = new SpinalRelationPtrLst(relationName);\n        break;\n      default:\n        throw new Error(\"Unknown relationType\");\n    }\n\n    return relation;\n  }\n}\n\nspinalCore.register_models([SpinalRelationFactory]);\nexport {\n  SPINAL_RELATION_TYPE,\n  SPINAL_RELATION_LST_PTR_TYPE,\n  SPINAL_RELATION_PTR_LST_TYPE,\n  RELATION_TYPE_LIST,\n  SpinalRelationFactory\n};\n"]}},"error":null,"hash":"6620a73f8652e0ff1038d641bfad57c0","cacheData":{"env":{}}}